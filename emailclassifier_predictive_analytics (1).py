# -*- coding: utf-8 -*-
"""Emailclassifier_predictive analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z1vwxh08UBHLJi6maDsNyYaw1OsTpbue
"""

nltk.download('all')

import imaplib
import email
from email.header import decode_header
import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

# Download NLTK data
nltk.download('punkt')
nltk.download('stopwords')

# Connect to Gmail via IMAP
IMAP_SERVER = 'imap.gmail.com'
EMAIL = 'swethasajunovember@gmail.com'
PASSWORD = 'nkdh fkzh wgsj tbni'

def fetch_emails():
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL, PASSWORD)
    mail.select('inbox')

    _, search_data = mail.search(None, 'ALL')
    email_ids = search_data[0].split()

    emails = []
    for email_id in email_ids[-20:]:  # Get the last 20 emails
        _, msg_data = mail.fetch(email_id, '(RFC822)')
        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_bytes(response_part[1])
                subject, encoding = decode_header(msg["Subject"])[0]
                if isinstance(subject, bytes):
                    subject = subject.decode(encoding or 'utf-8')
                emails.append(subject)

    mail.logout()
    return emails

# Fetch emails
emails = fetch_emails()

# Create a dataset for training
data = {
    'text': emails,
    'label': ['spam' if 'win' in text.lower() or 'free' in text.lower() else 'primary' for text in emails]
}

df = pd.DataFrame(data)

# Preprocessing
stop_words = set(stopwords.words('english'))

def clean_text(text):
    words = word_tokenize(text.lower())
    words = [word for word in words if word.isalnum() and word not in stop_words]
    return ' '.join(words)

df['cleaned_text'] = df['text'].apply(clean_text)

# Vectorize text
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df['cleaned_text'])
y = df['label']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

# Classify new emails
new_emails = fetch_emails()
new_data = [clean_text(email) for email in new_emails]
new_vectors = vectorizer.transform(new_data)
predictions = model.predict(new_vectors)

# Output classification results
for email, label in zip(new_emails, predictions):
    print(f"Email: {email[:50]}... â†’ {label}")